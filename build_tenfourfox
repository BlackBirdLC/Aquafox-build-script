#!/usr/bin/env bash

set -euf

macports_prefix='/opt/macports-tff'
compile_dir="${1:-/tmp}"
branch_name='mybranch'

export PATH="$macports_prefix/bin:$macports_prefix/sbin:/bin:/sbin:/usr/bin:/usr/sbin"
export COLUMNS=20

yn_prompt() {
  local message="$1"
  local output

  while true; do
    read -rp "$message" yn
    case "$yn" in
      [Yy]* ) output=0; break;;
      [Nn]* ) output=1; break;;
      * ) echo "Please answer yes or no.";;
    esac
  done

  return $output
}

replace_prefix() {
  echo "Replacing all occurrences of \"/opt/local\" with \"$macports_prefix\": "
  grep -Frl '/opt/local' "$compile_dir" | while IFS= read -r file; do
    sed -i '' "s#/opt/local#$macports_prefix#g" "$file"
    echo "Replaced in $file"
  done
}

clone() {
  repo="$1"
  branch="$2"
  echo "$repo"
  git clone --depth=1 -b "$branch" "$repo" "$compile_dir"
  cd "$compile_dir"
  git checkout -b "$branch_name"
  cd -
}

leopard_patch() {
  # Only run if actually running on leopard
  local var_dir="$macports_prefix/var/tenfourfox-developer-toolkit"
  local build_name
  build_name="$(basename "$compile_dir") $proc"

  if [[ $(sw_vers -productVersion) == *"10.5"* ]]; then
    echo 'Patching for leopard'

    cp "$var_dir/leopard_${build_name}.patch" "${compile_dir}/leopard.patch"
    cd "$compile_dir"

    git apply leopard.patch
    cd -
  fi
}

pull() {
  echo 'Pull the latest changes. This will take a while'

  cd "$compile_dir"
  local current_hash
  local new_hash
  local branch

  read -rp "Enter the branch to pull from (default: 'main' for Aquafox, 'master' for TenFourFox): " pull_branch
  pull_branch="${pull_branch:-$default_branch}"

  git stash
  git checkout "$pull_branch"
  current_hash="$(git rev-parse HEAD)"
  git pull origin "$pull_branch"
  new_hash="$(git rev-parse HEAD)"
  git checkout "$branch_name"
  git merge "$pull_branch"
  git stash pop || true

  if [[ "$current_hash" != "$new_hash" ]]; then
    replace_prefix
  fi
  cd -
}

clean() {
  rm -rf "$compile_dir/"{configure,obj-ff-dbg}
}

build() {
  local config="$1"
  local return_status=0

  cd "$compile_dir"
  cp "$config" .mozconfig

  autoconf213

  while [ $return_status -eq 0 ]; do
    if ! gmake -f client.mk build; then
      return_status=1

      echo ""
      if yn_prompt "------------ BUILD FAILED! RETRY? (Yy or Nn) ------------
(A retry may be necessary if you have less than 4 GB of RAM): "
      then
        return_status=0
      fi
    else
      return_status=0
      break
    fi
  done

  cd -
  return $return_status
}

enable_quartz() {
  local build_name
  build_name="$(basename "$compile_dir") $proc"

  # Test if Quartz extreme is supported. If so, give the option to enable it.
  if system_profiler SPDisplaysDataType | grep 'Quartz Extreme' | grep -q Supported; then
    if yn_prompt "Your video card supports Enable Quartz Extreme. Would you like to enable it in the browser?
This may increase performance. (Yn or Nn): "
    then
      sed -i '' "s#^</dict>#  <key>Quartz2DExtremeEnabled</key>\\
  <true/>\\
  <key>QuartzGLEnable</key>\\
  <true/>\\
</dict>#g" ~/"Desktop/${build_name}.app/Contents/Info.plist"

      mv ~/"Desktop/${build_name}.app" ~/"Desktop/${build_name} Quartz.app"
    fi
  fi
}

distribute() {
  echo "distributing"
  local build_name
  build_name="$(basename "$compile_dir") $proc"
  cd "$compile_dir"

  chmod +x ./104fx_copy.sh
  ./104fx_copy.sh ~/Desktop/"${build_name}.app"

  echo "Exported to ~/Desktop/${build_name}.app"
  cd -
}

PS3="Would you like to build Aquafox or TenFourFox? (1-2): "

select repo in 'Aquafox' 'TenFourFox'
do
  case "$repo" in
    "Aquafox")
      repo='https://github.com/BlackBirdLC/Aquafox'
      default_branch="main"
      compile_dir="${compile_dir}/Aquafox"
      break
      ;;
    "TenFourFox")
      repo='https://github.com/classilla/tenfourfox'
      default_branch="master"
      compile_dir="${compile_dir}/tenfourfox"
      break
      ;;
    *)
      echo 'Invalid selection. Try again.'
      ;;
    esac
done

echo ""

PS3="Your processor is a $(machine).
Please note that you can only build for the processor you have and lower.
For example, you can't build for a G5 from a G4.
Select the processor to build TenFourFox for (1-4): "

select proc in 'G3' 'G4-7400' 'G4-7450' 'G5'
do
  if [ -n "$proc" ]; then
    mozconfig="$proc.mozcfg"
    break
  else
    echo 'Invalid selection. Try again.'
  fi
done

echo ""

read -rp "Do you want to specify a branch to clone? (Y/n): " specify_branch

if [[ "$specify_branch" == "Y" || "$specify_branch" == "y" ]]; then
  read -rp "Enter the branch to clone (default: 'main' for Aquafox, 'master' for TenFourFox): " clone_branch
else
  clone_branch="$default_branch"
fi

if [ -d "$compile_dir" ]; then
  option1="Pull latest source from specified branch.
   This stashes your changes, pulls from the specified branch, and merges it into your branch.
"
  option2="Build from where it last left off.
   This keeps configure and obj-ff-dbg/ intact.
   Use this if you had to cancel your previous build.
"
  option3="Rebuild from scratch.
   This runs 'rm -rf configure obj-ff-dbg/' and starts the build over.
"
  PS3="$compile_dir exists. Do you want to (1-3): "
  select option in "$option1" "$option2" "$option3"
  do
    case $option in
      "$option1")
        pull
        build "$mozconfig" && distribute && enable_quartz
        break;;
      "$option2")
        build "$mozconfig" && distribute && enable_quartz
        break;;
      "$option3")
        echo 'Cleaning and starting over'
        clean
        build "$mozconfig" && distribute && enable_quartz
        break;;
    esac
  done
else
  clone "$repo" "$clone_branch"
  leopard_patch
  replace_prefix
  build "$mozconfig" && distribute && enable_quartz
fi
